
The old add car file




package com.example.trackcar;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.example.trackcar.Car;
import com.example.trackcar.questionare;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/*REPLACE THE CAR API website because our old API isn't secure AS dosn't allow*/
public class add_car extends AppCompatActivity {
    private static final String TAG = "AddCarActivity";
    private String APIKEY = "l1rFIVQmFE3GDu11A0/JPg==XhXqft1wIV4FeFMx";
    private Spinner Car_year, Car_make, Car_model, Car_trim;
    // Will save and store users car info in firebase, car_id helps look up more details of the car
    private String chosen_year, chosen_make, chosen_model, chose_trim, car_id;

    // The following is commonly used in AS to help run tasks on different threads to update UI safely
    private ExecutorService executor = Executors.newSingleThreadExecutor(); // Executes complex tasks such as API calls on new background thread
    private Handler handler = new Handler(Looper.getMainLooper()); // Android does not allow UI updates from background threads. Bring back to main thread to update UI

    //Used to save basic car info to firebase database
    private FirebaseAuth mAuth;
    private FirebaseFirestore userDb;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_add_car);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // Instantiate Spinner objects via their ID
        Car_year = findViewById(R.id.car_year);
        Car_make = findViewById(R.id.car_make);
        Car_model = findViewById(R.id.car_model);
        Car_trim = findViewById(R.id.car_trim);
        //Instantiate Firebase access
        mAuth = FirebaseAuth.getInstance();
        userDb = FirebaseFirestore.getInstance();
        // First find car years range provided from CarQuery
        // We first populate the years spinner with valid years
        executor.execute(() -> {
            try {
                // **How we do it**
                // 1: We first secure a connection with the URL that will return us the JSON data
                // 2: We read in via input and buffer reader
                // 3: We convert the 0 and 1s to a readable strings (done by returnJSONString function) which will then be converted to JSONObjects and JSONArrays
                // 4: Lastly we add the data we need from the JSON Objects or arrays to an ArrayList and attach it to our spinner using ArrayAdapter class (done in the dataToSpinners function)

                String APIUrl = "https://www.carqueryapi.com/api/0.3/?&cmd=getYears"; // The url we will make an API call from
                String jsonStr = returnJSONString(APIUrl);
                JSONObject obj = new JSONObject(jsonStr);
                JSONObject yearsObj;

                try {
                    yearsObj = obj.getJSONObject("Years");
                } catch (JSONException e) {
                    // Sometimes API returns "Years" as a string instead of an object
                    yearsObj = new JSONObject(obj.getString("Years"));
                }

                int minYear = yearsObj.getInt("min_year");
                int maxYear = yearsObj.getInt("max_year");

                // Generate list of years using the extracted JSON strings
                ArrayList<String> yearList = new ArrayList<>();
                for (int y = maxYear; y >= minYear; y--) { // descending order
                    yearList.add(String.valueOf(y));
                }

                // Update Spinner on main thread safely using ArrayAdapter (very common in Android Studio)
                handler.post(() -> dataToSpinners(yearList, Car_year));

            } catch (IOException | JSONException e) {
                Log.e(TAG, "Failed to load years", e);
                handler.post(() -> Toast.makeText(this, "Failed to load years", Toast.LENGTH_SHORT).show());
            }
        });

        // If user selects a year perform this listener and save the year chosen then populate the make spinner
        Car_year.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                // Get selected item
                chosen_year = parent.getItemAtPosition(position).toString();
                // If a year is selected then we can display the different car makes to the spinner
                getCarMakes();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                // Optional: handle no selection
            }
        });

        // If user selects a year and make perform this listener and save the make chosen then populate the model spinner
        Car_make.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                chosen_make = adapterView.getItemAtPosition(i).toString();
                // Once the make has been stored we can work on displaying the models list to the spinner
                getCarModel();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {}
        });

        // When user selects the year, make, and model last thing is to get the trim and also save the trim ID
        // so we can get more details such as HP and MPG later using a different API call
        Car_model.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                chosen_model = adapterView.getItemAtPosition(i).toString();
                // We want to populate the trim spinner with basic details
                getCarTrims();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {}
        });

        //Once the trim level is selected we have all the basic car data
        Car_trim.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                chose_trim = adapterView.getItemAtPosition(i).toString();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {}
        });
    }
    // Gets all car makes available for the selected year
    void getCarMakes() {
        executor.execute(() -> {
            try {
                // Try and secure a connection with the API to get list of makes from that year
                String APIUrl = "https://www.carqueryapi.com/api/0.3/?callback=?&cmd=getMakes&year=" + chosen_year;
                String jsonStr = returnJSONString(APIUrl);
                JSONObject json = new JSONObject(jsonStr);
                JSONArray car_makes = json.getJSONArray("Makes");
                ArrayList<String> make_ids = new ArrayList<>();
                for (int i = 0; i < car_makes.length(); i++) {
                    JSONObject current_car = car_makes.getJSONObject(i);
                    make_ids.add(current_car.getString("make_display"));
                }
                // Update Spinner on main thread safely using ArrayAdapter
                handler.post(() -> dataToSpinners(make_ids, Car_make));
            } catch (IOException | JSONException e) {
                Log.e(TAG, "Failed to load car makes", e);
                handler.post(() -> Toast.makeText(this, "Failed to load car makes", Toast.LENGTH_SHORT).show());
            }
        });
    }
    // Gets the car models to populate the spinner
    void getCarModel() {
        executor.execute(() -> {
            try {
                String APIUrl = "https://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=" + chosen_make + "&year=" + chosen_year;
                String jsonStr = returnJSONString(APIUrl);
                JSONObject json = new JSONObject(jsonStr);
                JSONArray modelsList = json.getJSONArray("Models");
                ArrayList<String> models = new ArrayList<>();
                for (int i = 0; i < modelsList.length(); i++) {
                    JSONObject current_model = modelsList.getJSONObject(i);
                    models.add(current_model.getString("model_name"));
                }
                handler.post(() -> dataToSpinners(models, Car_model));
            } catch (IOException | JSONException e) {
                Log.e(TAG, "Failed to load car models", e);
                handler.post(() -> Toast.makeText(this, "Failed to load car models", Toast.LENGTH_SHORT).show());
            }
        });
    }
    // Gets trims for the selected year/make/model
    void getCarTrims() {
        executor.execute(() -> {
            try {
                // We want to receive basic trim details from this API call
                String APIUrl = "https://www.carqueryapi.com/api/0.3/?cmd=getTrims&make=" + chosen_make + "&model=" + chosen_model + "&year=" + chosen_year + "&full_results=0";
                String jsonStrCleaned = returnJSONString(APIUrl);
                JSONObject json = new JSONObject(jsonStrCleaned);
                JSONArray trimsFromJSON = json.getJSONArray("Trims");
                ArrayList<String> vehicleTrims = new ArrayList<>();
                for (int i = 0; i < trimsFromJSON.length(); i++) {
                    JSONObject currentTrim = trimsFromJSON.getJSONObject(i);
                    vehicleTrims.add(currentTrim.getString("model_trim") + " [ID: " + currentTrim.getString("model_id") + "]");
                }
                handler.post(() -> dataToSpinners(vehicleTrims, Car_trim));
            } catch (IOException | JSONException e) {
                Log.e(TAG, "Failed to load car trims", e);
                handler.post(() -> Toast.makeText(this, "Failed to load car trims", Toast.LENGTH_SHORT).show());
            }
        });
    }
    // Used to attach ArrayList data to spinners
    void dataToSpinners(ArrayList<String> dataList, Spinner spinnerToPopulate) {
        ArrayAdapter<String> adapter = new ArrayAdapter<>(add_car.this,
                android.R.layout.simple_spinner_item, dataList);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerToPopulate.setAdapter(adapter);
    }
    // Function that handles the actual network call and returns the JSON string
    String returnJSONString(String APIURl) throws IOException {
        String jsonStrCleaned = "";
        BufferedReader reader = null;
        HttpURLConnection conn = null;
        try {
            URL url = new URL(APIURl);
            conn = (HttpURLConnection) url.openConnection();
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder results = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                results.append(line);
            }
            jsonStrCleaned = results.toString().trim();
            // Clean JSONP (CarQuery sometimes returns JSON wrapped with ?(...); )
            if (jsonStrCleaned.startsWith("?(") && jsonStrCleaned.endsWith(");")) {
                jsonStrCleaned = jsonStrCleaned.substring(2, jsonStrCleaned.length() - 2);
            }
        } catch (MalformedURLException e) {
            Log.e(TAG, "Malformed URL: " + APIURl, e);
        } catch (IOException e) {
            Log.e(TAG, "I/O error when calling API: " + APIURl, e);
            throw e;
        } finally {
            if (reader != null) reader.close();
            if (conn != null) conn.disconnect();
        }
        return jsonStrCleaned;
    }
    public void createCarObject(View V){
        ArrayList<String> basicDetails = new ArrayList<>();
        if(!chosen_year.isEmpty() && !chosen_make.isEmpty() && !chosen_model.isEmpty() && !chose_trim.isEmpty()) {
            basicDetails.add(chosen_year);
            basicDetails.add(chosen_make);
            basicDetails.add(chosen_model);
            basicDetails.add(chose_trim);
            Car car = new Car(basicDetails);

            //Add additional car details using the getModel API
            //addMoreCarDetails(car);
            FirebaseUser user = mAuth.getCurrentUser();
            userDb.collection("Users").document(user.getUid())
                    .collection("Vehicles").add(car)
                    .addOnSuccessListener(aVoid -> {
                        Toast.makeText(this, "Basic info stored", Toast.LENGTH_SHORT).show();
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(this, "Failed to save Car: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    });
            Intent i = new Intent(this, questionare.class);
            startActivity(i);
        } else {
            Toast.makeText(this,"All fields must be chosen", Toast.LENGTH_LONG).show();
        }
    }
    void addMoreCarDetails(Car c){
        Toast.makeText(this, c.getModel_id(), Toast.LENGTH_LONG).show();
        //String APIUrl = "https://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModel&model=" + c.getModel_id();
    }
}